package Service1;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 4/16/2014 2:21:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import Service1.WS_Enums.*;
import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import org.ksoap2.serialization.MarshalFloat;

public class Service1 {
    
    public String NAMESPACE ="http://tempuri.org/";
    public String url="";
    public int timeOut = 60000;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public Service1(){}
    
    public Service1(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public Service1(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public Service1(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void TestApplicationAsync(String sopstvenik,String firma,String magacin) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TestApplicationAsync(sopstvenik, firma, magacin, null);
    }
    
    public void TestApplicationAsync(final String sopstvenik,final String firma,final String magacin,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return TestApplication(sopstvenik, firma, magacin, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("TestApplication", result);
                }
            }
        }.execute();
    }
    
    public boolean TestApplication(String sopstvenik,String firma,String magacin){
        return TestApplication(sopstvenik, firma, magacin, null);
    }
    
    public boolean TestApplication(String sopstvenik,String firma,String magacin,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","TestApplication");
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("magacin",magacin);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/TestApplication", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/TestApplication", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void SendArtikliParagonAsync(String pateka) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SendArtikliParagonAsync(pateka, null);
    }
    
    public void SendArtikliParagonAsync(final String pateka,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return SendArtikliParagon(pateka, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SendArtikliParagon", result);
                }
            }
        }.execute();
    }
    
    public int SendArtikliParagon(String pateka){
        return SendArtikliParagon(pateka, null);
    }
    
    public int SendArtikliParagon(String pateka,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","SendArtikliParagon");
        soapReq.addProperty("pateka",pateka);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/SendArtikliParagon", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/SendArtikliParagon", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void kreiraj_narackaAsync(String proc_name,String pateka,String firma,String kasa,String masa,String prodav,String vraboten) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        kreiraj_narackaAsync(proc_name, pateka, firma, kasa, masa, prodav, vraboten, null);
    }
    
    public void kreiraj_narackaAsync(final String proc_name,final String pateka,final String firma,final String kasa,final String masa,final String prodav,final String vraboten,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                kreiraj_naracka(proc_name, pateka, firma, kasa, masa, prodav, vraboten, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("kreiraj_naracka", result);
                }
            }
        }.execute();
    }
    
    public void kreiraj_naracka(String proc_name,String pateka,String firma,String kasa,String masa,String prodav,String vraboten){
        kreiraj_naracka(proc_name, pateka, firma, kasa, masa, prodav, vraboten, null);
    }
    
    public void kreiraj_naracka(String proc_name,String pateka,String firma,String kasa,String masa,String prodav,String vraboten,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","kreiraj_naracka");
        soapReq.addProperty("proc_name",proc_name);
        soapReq.addProperty("pateka",pateka);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("kasa",kasa);
        soapReq.addProperty("masa",masa);
        soapReq.addProperty("prodav",prodav);
        soapReq.addProperty("vraboten",vraboten);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/kreiraj_naracka", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/kreiraj_naracka", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getUserfromIpAsync(String user_name,String sopstvenik,String ip) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getUserfromIpAsync(user_name, sopstvenik, ip, null);
    }
    
    public void getUserfromIpAsync(final String user_name,final String sopstvenik,final String ip,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getUserfromIp(user_name, sopstvenik, ip, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getUserfromIp", result);
                }
            }
        }.execute();
    }
    
    public String getUserfromIp(String user_name,String sopstvenik,String ip){
        return getUserfromIp(user_name, sopstvenik, ip, null);
    }
    
    public String getUserfromIp(String user_name,String sopstvenik,String ip,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getUserfromIp");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("ip",ip);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getUserfromIp", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getUserfromIp", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getApplicationIpFromUserAsync(String user_name,String sopstvenik,String touser) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getApplicationIpFromUserAsync(user_name, sopstvenik, touser, null);
    }
    
    public void getApplicationIpFromUserAsync(final String user_name,final String sopstvenik,final String touser,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getApplicationIpFromUser(user_name, sopstvenik, touser, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getApplicationIpFromUser", result);
                }
            }
        }.execute();
    }
    
    public String getApplicationIpFromUser(String user_name,String sopstvenik,String touser){
        return getApplicationIpFromUser(user_name, sopstvenik, touser, null);
    }
    
    public String getApplicationIpFromUser(String user_name,String sopstvenik,String touser,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getApplicationIpFromUser");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("touser",touser);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getApplicationIpFromUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getApplicationIpFromUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getApplicationUserFromIpAsync(String user_name,String sopstvenik,String ip) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getApplicationUserFromIpAsync(user_name, sopstvenik, ip, null);
    }
    
    public void getApplicationUserFromIpAsync(final String user_name,final String sopstvenik,final String ip,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getApplicationUserFromIp(user_name, sopstvenik, ip, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getApplicationUserFromIp", result);
                }
            }
        }.execute();
    }
    
    public String getApplicationUserFromIp(String user_name,String sopstvenik,String ip){
        return getApplicationUserFromIp(user_name, sopstvenik, ip, null);
    }
    
    public String getApplicationUserFromIp(String user_name,String sopstvenik,String ip,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getApplicationUserFromIp");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("ip",ip);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getApplicationUserFromIp", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getApplicationUserFromIp", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void IsExist2Async(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        IsExist2Async(user_name, sopstvenik, null);
    }
    
    public void IsExist2Async(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return IsExist2(user_name, sopstvenik, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("IsExist2", result);
                }
            }
        }.execute();
    }
    
    public boolean IsExist2(String user_name,String sopstvenik){
        return IsExist2(user_name, sopstvenik, null);
    }
    
    public boolean IsExist2(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","IsExist2");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IsExist2", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IsExist2", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void UpdateChangesAsync(String what,String value,String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateChangesAsync(what, value, user_name, sopstvenik, null);
    }
    
    public void UpdateChangesAsync(final String what,final String value,final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                UpdateChanges(what, value, user_name, sopstvenik, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateChanges", result);
                }
            }
        }.execute();
    }
    
    public void UpdateChanges(String what,String value,String user_name,String sopstvenik){
        UpdateChanges(what, value, user_name, sopstvenik, null);
    }
    
    public void UpdateChanges(String what,String value,String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpdateChanges");
        soapReq.addProperty("what",what);
        soapReq.addProperty("value",value);
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/UpdateChanges", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/UpdateChanges", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void Najava2Async(String user_name,String sopstvenik,int sekundinajava) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        Najava2Async(user_name, sopstvenik, sekundinajava, null);
    }
    
    public void Najava2Async(final String user_name,final String sopstvenik,final int sekundinajava,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return Najava2(user_name, sopstvenik, sekundinajava, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Najava2", result);
                }
            }
        }.execute();
    }
    
    public int Najava2(String user_name,String sopstvenik,int sekundinajava){
        return Najava2(user_name, sopstvenik, sekundinajava, null);
    }
    
    public int Najava2(String user_name,String sopstvenik,int sekundinajava,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","Najava2");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("sekundinajava",sekundinajava);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/Najava2", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/Najava2", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void GetFileAsync(String filename,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFileAsync(filename, sopstvenik, null);
    }
    
    public void GetFileAsync(final String filename,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorByte>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorByte doInBackground(Void... params) {
                return GetFile(filename, sopstvenik, headers);
            }
            @Override
            protected void onPostExecute(VectorByte result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFile", result);
                }
            }
        }.execute();
    }
    
    public VectorByte GetFile(String filename,String sopstvenik){
        return GetFile(filename, sopstvenik, null);
    }
    
    public VectorByte GetFile(String filename,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFile");
        soapReq.addProperty("filename",filename);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFile", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapPrimitive j = (SoapPrimitive)obj;
                    VectorByte resultVariable = new VectorByte(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PutFileAsync(VectorByte buffer,String filename) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PutFileAsync(buffer, filename, null);
    }
    
    public void PutFileAsync(final VectorByte buffer,final String filename,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                PutFile(buffer, filename, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PutFile", result);
                }
            }
        }.execute();
    }
    
    public void PutFile(VectorByte buffer,String filename){
        PutFile(buffer, filename, null);
    }
    
    public void PutFile(VectorByte buffer,String filename,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PutFile");
        soapReq.addProperty("buffer",buffer.toString());
        soapReq.addProperty("filename",filename);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/PutFile", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/PutFile", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void ZemiNaredbaAsync(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ZemiNaredbaAsync(user_name, sopstvenik, null);
    }
    
    public void ZemiNaredbaAsync(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return ZemiNaredba(user_name, sopstvenik, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ZemiNaredba", result);
                }
            }
        }.execute();
    }
    
    public String ZemiNaredba(String user_name,String sopstvenik){
        return ZemiNaredba(user_name, sopstvenik, null);
    }
    
    public String ZemiNaredba(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ZemiNaredba");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/ZemiNaredba", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/ZemiNaredba", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void ZemiAPPAsync(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ZemiAPPAsync(user_name, sopstvenik, null);
    }
    
    public void ZemiAPPAsync(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return ZemiAPP(user_name, sopstvenik, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ZemiAPP", result);
                }
            }
        }.execute();
    }
    
    public String ZemiAPP(String user_name,String sopstvenik){
        return ZemiAPP(user_name, sopstvenik, null);
    }
    
    public String ZemiAPP(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ZemiAPP");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/ZemiAPP", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/ZemiAPP", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void PostaviAPPAsync(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PostaviAPPAsync(user_name, sopstvenik, null);
    }
    
    public void PostaviAPPAsync(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                PostaviAPP(user_name, sopstvenik, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PostaviAPP", result);
                }
            }
        }.execute();
    }
    
    public void PostaviAPP(String user_name,String sopstvenik){
        PostaviAPP(user_name, sopstvenik, null);
    }
    
    public void PostaviAPP(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PostaviAPP");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/PostaviAPP", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/PostaviAPP", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void ZAPPAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ZAPPAsync(null);
    }
    
    public void ZAPPAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return ZAPP(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ZAPP", result);
                }
            }
        }.execute();
    }
    
    public String ZAPP(){
        return ZAPP(null);
    }
    
    public String ZAPP(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ZAPP");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/ZAPP", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/ZAPP", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void ZavrsenaNaredbaAsync(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ZavrsenaNaredbaAsync(user_name, sopstvenik, null);
    }
    
    public void ZavrsenaNaredbaAsync(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                ZavrsenaNaredba(user_name, sopstvenik, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ZavrsenaNaredba", result);
                }
            }
        }.execute();
    }
    
    public void ZavrsenaNaredba(String user_name,String sopstvenik){
        ZavrsenaNaredba(user_name, sopstvenik, null);
    }
    
    public void ZavrsenaNaredba(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ZavrsenaNaredba");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/ZavrsenaNaredba", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/ZavrsenaNaredba", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getMyDatabases2Async(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getMyDatabases2Async(user_name, sopstvenik, null);
    }
    
    public void getMyDatabases2Async(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getMyDatabases2(user_name, sopstvenik, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getMyDatabases2", result);
                }
            }
        }.execute();
    }
    
    public void getMyDatabases2(String user_name,String sopstvenik){
        getMyDatabases2(user_name, sopstvenik, null);
    }
    
    public void getMyDatabases2(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getMyDatabases2");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getMyDatabases2", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getMyDatabases2", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getGlavenMonAsync(String user_name,String sopstvenik,String firma) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getGlavenMonAsync(user_name, sopstvenik, firma, null);
    }
    
    public void getGlavenMonAsync(final String user_name,final String sopstvenik,final String firma,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getGlavenMon(user_name, sopstvenik, firma, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getGlavenMon", result);
                }
            }
        }.execute();
    }
    
    public String getGlavenMon(String user_name,String sopstvenik,String firma){
        return getGlavenMon(user_name, sopstvenik, firma, null);
    }
    
    public String getGlavenMon(String user_name,String sopstvenik,String firma,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getGlavenMon");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("firma",firma);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getGlavenMon", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getGlavenMon", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetFile2Async(String filename,String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFile2Async(filename, user_name, sopstvenik, null);
    }
    
    public void GetFile2Async(final String filename,final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorByte>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorByte doInBackground(Void... params) {
                return GetFile2(filename, user_name, sopstvenik, headers);
            }
            @Override
            protected void onPostExecute(VectorByte result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFile2", result);
                }
            }
        }.execute();
    }
    
    public VectorByte GetFile2(String filename,String user_name,String sopstvenik){
        return GetFile2(filename, user_name, sopstvenik, null);
    }
    
    public VectorByte GetFile2(String filename,String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFile2");
        soapReq.addProperty("filename",filename);
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFile2", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFile2", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapPrimitive j = (SoapPrimitive)obj;
                    VectorByte resultVariable = new VectorByte(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PutFile2Async(VectorByte buffer,String filename,String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PutFile2Async(buffer, filename, user_name, sopstvenik, null);
    }
    
    public void PutFile2Async(final VectorByte buffer,final String filename,final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                PutFile2(buffer, filename, user_name, sopstvenik, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PutFile2", result);
                }
            }
        }.execute();
    }
    
    public void PutFile2(VectorByte buffer,String filename,String user_name,String sopstvenik){
        PutFile2(buffer, filename, user_name, sopstvenik, null);
    }
    
    public void PutFile2(VectorByte buffer,String filename,String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PutFile2");
        soapReq.addProperty("buffer",buffer.toString());
        soapReq.addProperty("filename",filename);
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/PutFile2", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/PutFile2", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void PutFile3Async(VectorByte buffer,String filename,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PutFile3Async(buffer, filename, sopstvenik, null);
    }
    
    public void PutFile3Async(final VectorByte buffer,final String filename,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                PutFile3(buffer, filename, sopstvenik, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PutFile3", result);
                }
            }
        }.execute();
    }
    
    public void PutFile3(VectorByte buffer,String filename,String sopstvenik){
        PutFile3(buffer, filename, sopstvenik, null);
    }
    
    public void PutFile3(VectorByte buffer,String filename,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PutFile3");
        soapReq.addProperty("buffer",buffer.toString());
        soapReq.addProperty("filename",filename);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/PutFile3", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/PutFile3", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void PratiInformacijaAsync(String user_name,String sopstvenik,String informacija) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PratiInformacijaAsync(user_name, sopstvenik, informacija, null);
    }
    
    public void PratiInformacijaAsync(final String user_name,final String sopstvenik,final String informacija,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                PratiInformacija(user_name, sopstvenik, informacija, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PratiInformacija", result);
                }
            }
        }.execute();
    }
    
    public void PratiInformacija(String user_name,String sopstvenik,String informacija){
        PratiInformacija(user_name, sopstvenik, informacija, null);
    }
    
    public void PratiInformacija(String user_name,String sopstvenik,String informacija,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PratiInformacija");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("informacija",informacija);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/PratiInformacija", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/PratiInformacija", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void ZemiInformacijaAsync(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ZemiInformacijaAsync(user_name, sopstvenik, null);
    }
    
    public void ZemiInformacijaAsync(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return ZemiInformacija(user_name, sopstvenik, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ZemiInformacija", result);
                }
            }
        }.execute();
    }
    
    public String ZemiInformacija(String user_name,String sopstvenik){
        return ZemiInformacija(user_name, sopstvenik, null);
    }
    
    public String ZemiInformacija(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ZemiInformacija");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/ZemiInformacija", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/ZemiInformacija", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void NaredbaAsync(String user_name,String sopstvenik,String naredba1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        NaredbaAsync(user_name, sopstvenik, naredba1, null);
    }
    
    public void NaredbaAsync(final String user_name,final String sopstvenik,final String naredba1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return Naredba(user_name, sopstvenik, naredba1, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Naredba", result);
                }
            }
        }.execute();
    }
    
    public String Naredba(String user_name,String sopstvenik,String naredba1){
        return Naredba(user_name, sopstvenik, naredba1, null);
    }
    
    public String Naredba(String user_name,String sopstvenik,String naredba1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","Naredba");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("naredba1",naredba1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/Naredba", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/Naredba", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void UspesnaNaredbaAsync(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UspesnaNaredbaAsync(user_name, sopstvenik, null);
    }
    
    public void UspesnaNaredbaAsync(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return UspesnaNaredba(user_name, sopstvenik, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UspesnaNaredba", result);
                }
            }
        }.execute();
    }
    
    public String UspesnaNaredba(String user_name,String sopstvenik){
        return UspesnaNaredba(user_name, sopstvenik, null);
    }
    
    public String UspesnaNaredba(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UspesnaNaredba");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/UspesnaNaredba", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/UspesnaNaredba", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getUsersAsync(String user,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getUsersAsync(user, sopstvenik, null);
    }
    
    public void getUsersAsync(final String user,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getUsers(user, sopstvenik, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getUsers", result);
                }
            }
        }.execute();
    }
    
    public void getUsers(String user,String sopstvenik){
        getUsers(user, sopstvenik, null);
    }
    
    public void getUsers(String user,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getUsers");
        soapReq.addProperty("user",user);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getUsers", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getUsers", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void NadgradbaAsync(String sopstvenik,String sto) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        NadgradbaAsync(sopstvenik, sto, null);
    }
    
    public void NadgradbaAsync(final String sopstvenik,final String sto,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return Nadgradba(sopstvenik, sto, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Nadgradba", result);
                }
            }
        }.execute();
    }
    
    public String Nadgradba(String sopstvenik,String sto){
        return Nadgradba(sopstvenik, sto, null);
    }
    
    public String Nadgradba(String sopstvenik,String sto,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","Nadgradba");
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("sto",sto);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/Nadgradba", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/Nadgradba", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GET_VREMEAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GET_VREMEAsync(null);
    }
    
    public void GET_VREMEAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GET_VREME(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GET_VREME", result);
                }
            }
        }.execute();
    }
    
    public String GET_VREME(){
        return GET_VREME(null);
    }
    
    public String GET_VREME(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GET_VREME");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GET_VREME", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GET_VREME", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void NadgradiVerzijaAsync(String sopstvenik,String sto) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        NadgradiVerzijaAsync(sopstvenik, sto, null);
    }
    
    public void NadgradiVerzijaAsync(final String sopstvenik,final String sto,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                NadgradiVerzija(sopstvenik, sto, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("NadgradiVerzija", result);
                }
            }
        }.execute();
    }
    
    public void NadgradiVerzija(String sopstvenik,String sto){
        NadgradiVerzija(sopstvenik, sto, null);
    }
    
    public void NadgradiVerzija(String sopstvenik,String sto,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","NadgradiVerzija");
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("sto",sto);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/NadgradiVerzija", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/NadgradiVerzija", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetApplicationVariablesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetApplicationVariablesAsync(null);
    }
    
    public void GetApplicationVariablesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorString>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorString doInBackground(Void... params) {
                return GetApplicationVariables(headers);
            }
            @Override
            protected void onPostExecute(VectorString result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetApplicationVariables", result);
                }
            }
        }.execute();
    }
    
    public VectorString GetApplicationVariables(){
        return GetApplicationVariables(null);
    }
    
    public VectorString GetApplicationVariables(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetApplicationVariables");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetApplicationVariables", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetApplicationVariables", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorString resultVariable = new VectorString(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetApplicationValueAsync(String k) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetApplicationValueAsync(k, null);
    }
    
    public void GetApplicationValueAsync(final String k,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetApplicationValue(k, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetApplicationValue", result);
                }
            }
        }.execute();
    }
    
    public String GetApplicationValue(String k){
        return GetApplicationValue(k, null);
    }
    
    public String GetApplicationValue(String k,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetApplicationValue");
        soapReq.addProperty("k",k);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetApplicationValue", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetApplicationValue", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getIp_Lokal_HMAsync(String sopstvenik,String user_name,int koj) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getIp_Lokal_HMAsync(sopstvenik, user_name, koj, null);
    }
    
    public void getIp_Lokal_HMAsync(final String sopstvenik,final String user_name,final int koj,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getIp_Lokal_HM(sopstvenik, user_name, koj, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getIp_Lokal_HM", result);
                }
            }
        }.execute();
    }
    
    public void getIp_Lokal_HM(String sopstvenik,String user_name,int koj){
        getIp_Lokal_HM(sopstvenik, user_name, koj, null);
    }
    
    public void getIp_Lokal_HM(String sopstvenik,String user_name,int koj,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getIp_Lokal_HM");
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("koj",koj);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getIp_Lokal_HM", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getIp_Lokal_HM", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetSelectAsync(String sopstvenik,String firma,String magacin) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSelectAsync(sopstvenik, firma, magacin, null);
    }
    
    public void GetSelectAsync(final String sopstvenik,final String firma,final String magacin,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                GetSelect(sopstvenik, firma, magacin, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetSelect", result);
                }
            }
        }.execute();
    }
    
    public void GetSelect(String sopstvenik,String firma,String magacin){
        GetSelect(sopstvenik, firma, magacin, null);
    }
    
    public void GetSelect(String sopstvenik,String firma,String magacin,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetSelect");
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("magacin",magacin);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetSelect", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetSelect", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void DisposeAppAsync(String sopstvenik,String firma,String magacin) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DisposeAppAsync(sopstvenik, firma, magacin, null);
    }
    
    public void DisposeAppAsync(final String sopstvenik,final String firma,final String magacin,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                DisposeApp(sopstvenik, firma, magacin, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DisposeApp", result);
                }
            }
        }.execute();
    }
    
    public void DisposeApp(String sopstvenik,String firma,String magacin){
        DisposeApp(sopstvenik, firma, magacin, null);
    }
    
    public void DisposeApp(String sopstvenik,String firma,String magacin,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","DisposeApp");
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("magacin",magacin);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/DisposeApp", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/DisposeApp", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void PutSelectAsync(String sopstvenik,String firma,String magacin) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PutSelectAsync(sopstvenik, firma, magacin, null);
    }
    
    public void PutSelectAsync(final String sopstvenik,final String firma,final String magacin,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                PutSelect(sopstvenik, firma, magacin, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PutSelect", result);
                }
            }
        }.execute();
    }
    
    public void PutSelect(String sopstvenik,String firma,String magacin){
        PutSelect(sopstvenik, firma, magacin, null);
    }
    
    public void PutSelect(String sopstvenik,String firma,String magacin,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PutSelect");
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("magacin",magacin);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/PutSelect", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/PutSelect", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void HelloWorldAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        HelloWorldAsync(null);
    }
    
    public void HelloWorldAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return HelloWorld(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("HelloWorld", result);
                }
            }
        }.execute();
    }
    
    public String HelloWorld(){
        return HelloWorld(null);
    }
    
    public String HelloWorld(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","HelloWorld");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/HelloWorld", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/HelloWorld", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void IUD_DBAsync(String sql,String pateka) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        IUD_DBAsync(sql, pateka, null);
    }
    
    public void IUD_DBAsync(final String sql,final String pateka,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return IUD_DB(sql, pateka, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("IUD_DB", result);
                }
            }
        }.execute();
    }
    
    public boolean IUD_DB(String sql,String pateka){
        return IUD_DB(sql, pateka, null);
    }
    
    public boolean IUD_DB(String sql,String pateka,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","IUD_DB");
        soapReq.addProperty("sql",sql);
        soapReq.addProperty("pateka",pateka);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IUD_DB", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IUD_DB", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void SELECT_FROM_PROCAsync(String proc_name,String pateka) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SELECT_FROM_PROCAsync(proc_name, pateka, null);
    }
    
    public void SELECT_FROM_PROCAsync(final String proc_name,final String pateka,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                SELECT_FROM_PROC(proc_name, pateka, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SELECT_FROM_PROC", result);
                }
            }
        }.execute();
    }
    
    public void SELECT_FROM_PROC(String proc_name,String pateka){
        SELECT_FROM_PROC(proc_name, pateka, null);
    }
    
    public void SELECT_FROM_PROC(String proc_name,String pateka,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","SELECT_FROM_PROC");
        soapReq.addProperty("proc_name",proc_name);
        soapReq.addProperty("pateka",pateka);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/SELECT_FROM_PROC", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/SELECT_FROM_PROC", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void PutDSAsync(String sopstvenik,String firma,String magacin,String distributer) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PutDSAsync(sopstvenik, firma, magacin, distributer, null);
    }
    
    public void PutDSAsync(final String sopstvenik,final String firma,final String magacin,final String distributer,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                PutDS(sopstvenik, firma, magacin, distributer, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PutDS", result);
                }
            }
        }.execute();
    }
    
    public void PutDS(String sopstvenik,String firma,String magacin,String distributer){
        PutDS(sopstvenik, firma, magacin, distributer, null);
    }
    
    public void PutDS(String sopstvenik,String firma,String magacin,String distributer,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PutDS");
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("magacin",magacin);
        soapReq.addProperty("distributer",distributer);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/PutDS", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/PutDS", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void zemi_dsAsync(String sops,String fir,String mag,String distr) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        zemi_dsAsync(sops, fir, mag, distr, null);
    }
    
    public void zemi_dsAsync(final String sops,final String fir,final String mag,final String distr,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                zemi_ds(sops, fir, mag, distr, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("zemi_ds", result);
                }
            }
        }.execute();
    }
    
    public void zemi_ds(String sops,String fir,String mag,String distr){
        zemi_ds(sops, fir, mag, distr, null);
    }
    
    public void zemi_ds(String sops,String fir,String mag,String distr,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","zemi_ds");
        soapReq.addProperty("sops",sops);
        soapReq.addProperty("fir",fir);
        soapReq.addProperty("mag",mag);
        soapReq.addProperty("distr",distr);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/zemi_ds", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/zemi_ds", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void TestConnSQLAsync(String pateka) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TestConnSQLAsync(pateka, null);
    }
    
    public void TestConnSQLAsync(final String pateka,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return TestConnSQL(pateka, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("TestConnSQL", result);
                }
            }
        }.execute();
    }
    
    public boolean TestConnSQL(String pateka){
        return TestConnSQL(pateka, null);
    }
    
    public boolean TestConnSQL(String pateka,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","TestConnSQL");
        soapReq.addProperty("pateka",pateka);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/TestConnSQL", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/TestConnSQL", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void SELECT_FROM_PROC1Async(String proc_name,String pateka) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SELECT_FROM_PROC1Async(proc_name, pateka, null);
    }
    
    public void SELECT_FROM_PROC1Async(final String proc_name,final String pateka,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                SELECT_FROM_PROC1(proc_name, pateka, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SELECT_FROM_PROC1", result);
                }
            }
        }.execute();
    }
    
    public void SELECT_FROM_PROC1(String proc_name,String pateka){
        SELECT_FROM_PROC1(proc_name, pateka, null);
    }
    
    public void SELECT_FROM_PROC1(String proc_name,String pateka,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","SELECT_FROM_PROC1");
        soapReq.addProperty("proc_name",proc_name);
        soapReq.addProperty("pateka",pateka);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/SELECT_FROM_PROC1", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/SELECT_FROM_PROC1", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void SELECT_DBAsync(String sql,String pateka) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SELECT_DBAsync(sql, pateka, null);
    }
    
    public void SELECT_DBAsync(final String sql,final String pateka,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                SELECT_DB(sql, pateka, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SELECT_DB", result);
                }
            }
        }.execute();
    }
    
    public void SELECT_DB(String sql,String pateka){
        SELECT_DB(sql, pateka, null);
    }
    
    public void SELECT_DB(String sql,String pateka,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","SELECT_DB");
        soapReq.addProperty("sql",sql);
        soapReq.addProperty("pateka",pateka);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/SELECT_DB", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/SELECT_DB", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void exec_procAsync(String sql,String pateka) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        exec_procAsync(sql, pateka, null);
    }
    
    public void exec_procAsync(final String sql,final String pateka,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return exec_proc(sql, pateka, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("exec_proc", result);
                }
            }
        }.execute();
    }
    
    public boolean exec_proc(String sql,String pateka){
        return exec_proc(sql, pateka, null);
    }
    
    public boolean exec_proc(String sql,String pateka,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","exec_proc");
        soapReq.addProperty("sql",sql);
        soapReq.addProperty("pateka",pateka);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/exec_proc", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/exec_proc", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void ZemiDataSetAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ZemiDataSetAsync(null);
    }
    
    public void ZemiDataSetAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                ZemiDataSet(headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ZemiDataSet", result);
                }
            }
        }.execute();
    }
    
    public void ZemiDataSet(){
        ZemiDataSet(null);
    }
    
    public void ZemiDataSet(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ZemiDataSet");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/ZemiDataSet", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/ZemiDataSet", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void TestMethodForAllItemsInOrderAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TestMethodForAllItemsInOrderAsync(null);
    }
    
    public void TestMethodForAllItemsInOrderAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return TestMethodForAllItemsInOrder(headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("TestMethodForAllItemsInOrder", result);
                }
            }
        }.execute();
    }
    
    public boolean TestMethodForAllItemsInOrder(){
        return TestMethodForAllItemsInOrder(null);
    }
    
    public boolean TestMethodForAllItemsInOrder(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","TestMethodForAllItemsInOrder");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/TestMethodForAllItemsInOrder", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/TestMethodForAllItemsInOrder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void orderByAndroidNewZAsync(String pateka,String firma,String kasa,String masa,String prodav,String vraboten,VectorProduct products) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        orderByAndroidNewZAsync(pateka, firma, kasa, masa, prodav, vraboten, products, null);
    }
    
    public void orderByAndroidNewZAsync(final String pateka,final String firma,final String kasa,final String masa,final String prodav,final String vraboten,final VectorProduct products,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return orderByAndroidNewZ(pateka, firma, kasa, masa, prodav, vraboten, products, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("orderByAndroidNewZ", result);
                }
            }
        }.execute();
    }
    
    public boolean orderByAndroidNewZ(String pateka,String firma,String kasa,String masa,String prodav,String vraboten,VectorProduct products){
        return orderByAndroidNewZ(pateka, firma, kasa, masa, prodav, vraboten, products, null);
    }
    
    public boolean orderByAndroidNewZ(String pateka,String firma,String kasa,String masa,String prodav,String vraboten,VectorProduct products,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","orderByAndroidNewZ");
        soapReq.addProperty("pateka",pateka);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("kasa",kasa);
        soapReq.addProperty("masa",masa);
        soapReq.addProperty("prodav",prodav);
        soapReq.addProperty("vraboten",vraboten);
        soapReq.addProperty("products",products);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/orderByAndroidNewZ", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/orderByAndroidNewZ", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void orderByAndroidNewAsync(String pateka,String firma,String kasa,String masa,String prodav,String vraboten,String products) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        orderByAndroidNewAsync(pateka, firma, kasa, masa, prodav, vraboten, products, null);
    }
    
    public void orderByAndroidNewAsync(final String pateka,final String firma,final String kasa,final String masa,final String prodav,final String vraboten,final String products,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return orderByAndroidNew(pateka, firma, kasa, masa, prodav, vraboten, products, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("orderByAndroidNew", result);
                }
            }
        }.execute();
    }
    
    public boolean orderByAndroidNew(String pateka,String firma,String kasa,String masa,String prodav,String vraboten,String products){
        return orderByAndroidNew(pateka, firma, kasa, masa, prodav, vraboten, products, null);
    }
    
    public boolean orderByAndroidNew(String pateka,String firma,String kasa,String masa,String prodav,String vraboten,String products,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","orderByAndroidNew");
        soapReq.addProperty("pateka",pateka);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("kasa",kasa);
        soapReq.addProperty("masa",masa);
        soapReq.addProperty("prodav",prodav);
        soapReq.addProperty("vraboten",vraboten);
        soapReq.addProperty("products",products);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/orderByAndroidNew", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/orderByAndroidNew", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void orderAsync(String pateka,String firma,String kasa,String masa,String prodav,String vraboten,VectorProduct products) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        orderAsync(pateka, firma, kasa, masa, prodav, vraboten, products, null);
    }
    
    public void orderAsync(final String pateka,final String firma,final String kasa,final String masa,final String prodav,final String vraboten,final VectorProduct products,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return order(pateka, firma, kasa, masa, prodav, vraboten, products, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("order", result);
                }
            }
        }.execute();
    }
    
    public boolean order(String pateka,String firma,String kasa,String masa,String prodav,String vraboten,VectorProduct products){
        return order(pateka, firma, kasa, masa, prodav, vraboten, products, null);
    }
    
    public boolean order(String pateka,String firma,String kasa,String masa,String prodav,String vraboten,VectorProduct products,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","order");
        soapReq.addProperty("pateka",pateka);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("kasa",kasa);
        soapReq.addProperty("masa",masa);
        soapReq.addProperty("prodav",prodav);
        soapReq.addProperty("vraboten",vraboten);
        soapReq.addProperty("products",products);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/order", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/order", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void orderByAndroidAsync(String pateka,String firma,String kasa,String vraboten,String prodavnica,String masa,String sifra,float kolicina,float cena,String art_dat,String art_vreme) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        orderByAndroidAsync(pateka, firma, kasa, vraboten, prodavnica, masa, sifra, kolicina, cena, art_dat, art_vreme, null);
    }
    
    public void orderByAndroidAsync(final String pateka,final String firma,final String kasa,final String vraboten,final String prodavnica,final String masa,final String sifra,final float kolicina,final float cena,final String art_dat,final String art_vreme,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return orderByAndroid(pateka, firma, kasa, vraboten, prodavnica, masa, sifra, kolicina, cena, art_dat, art_vreme, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("orderByAndroid", result);
                }
            }
        }.execute();
    }
    
    public boolean orderByAndroid(String pateka,String firma,String kasa,String vraboten,String prodavnica,String masa,String sifra,float kolicina,float cena,String art_dat,String art_vreme){
        return orderByAndroid(pateka, firma, kasa, vraboten, prodavnica, masa, sifra, kolicina, cena, art_dat, art_vreme, null);
    }
    
    public boolean orderByAndroid(String pateka,String firma,String kasa,String vraboten,String prodavnica,String masa,String sifra,float kolicina,float cena,String art_dat,String art_vreme,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","orderByAndroid");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("pateka",pateka);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("kasa",kasa);
        soapReq.addProperty("vraboten",vraboten);
        soapReq.addProperty("prodavnica",prodavnica);
        soapReq.addProperty("masa",masa);
        soapReq.addProperty("sifra",sifra);
        soapReq.addProperty("kolicina",kolicina);
        soapReq.addProperty("cena",cena);
        soapReq.addProperty("art_dat",art_dat);
        soapReq.addProperty("art_vreme",art_vreme);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/orderByAndroid", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/orderByAndroid", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void TestAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TestAsync(null);
    }
    
    public void TestAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return Test(headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Test", result);
                }
            }
        }.execute();
    }
    
    public boolean Test(){
        return Test(null);
    }
    
    public boolean Test(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","Test");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/Test", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/Test", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void setUserAsync(String user_name,String sopstvenik,String naziv,String mac_address) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        setUserAsync(user_name, sopstvenik, naziv, mac_address, null);
    }
    
    public void setUserAsync(final String user_name,final String sopstvenik,final String naziv,final String mac_address,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return setUser(user_name, sopstvenik, naziv, mac_address, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("setUser", result);
                }
            }
        }.execute();
    }
    
    public String setUser(String user_name,String sopstvenik,String naziv,String mac_address){
        return setUser(user_name, sopstvenik, naziv, mac_address, null);
    }
    
    public String setUser(String user_name,String sopstvenik,String naziv,String mac_address,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","setUser");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("naziv",naziv);
        soapReq.addProperty("mac_address",mac_address);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/setUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/setUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void hlsSelectAsync(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        hlsSelectAsync(user_name, sopstvenik, null);
    }
    
    public void hlsSelectAsync(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                hlsSelect(user_name, sopstvenik, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("hlsSelect", result);
                }
            }
        }.execute();
    }
    
    public void hlsSelect(String user_name,String sopstvenik){
        hlsSelect(user_name, sopstvenik, null);
    }
    
    public void hlsSelect(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","hlsSelect");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/hlsSelect", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/hlsSelect", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void hlsInsertAsync(String user_name,String sopstvenik,String firma,String lokacija_sifra,String tip_lokacija,String lokal_pateka,String guid_transfer,int glaven_mon) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        hlsInsertAsync(user_name, sopstvenik, firma, lokacija_sifra, tip_lokacija, lokal_pateka, guid_transfer, glaven_mon, null);
    }
    
    public void hlsInsertAsync(final String user_name,final String sopstvenik,final String firma,final String lokacija_sifra,final String tip_lokacija,final String lokal_pateka,final String guid_transfer,final int glaven_mon,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return hlsInsert(user_name, sopstvenik, firma, lokacija_sifra, tip_lokacija, lokal_pateka, guid_transfer, glaven_mon, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("hlsInsert", result);
                }
            }
        }.execute();
    }
    
    public String hlsInsert(String user_name,String sopstvenik,String firma,String lokacija_sifra,String tip_lokacija,String lokal_pateka,String guid_transfer,int glaven_mon){
        return hlsInsert(user_name, sopstvenik, firma, lokacija_sifra, tip_lokacija, lokal_pateka, guid_transfer, glaven_mon, null);
    }
    
    public String hlsInsert(String user_name,String sopstvenik,String firma,String lokacija_sifra,String tip_lokacija,String lokal_pateka,String guid_transfer,int glaven_mon,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","hlsInsert");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("lokacija_sifra",lokacija_sifra);
        soapReq.addProperty("tip_lokacija",tip_lokacija);
        soapReq.addProperty("lokal_pateka",lokal_pateka);
        soapReq.addProperty("guid_transfer",guid_transfer);
        soapReq.addProperty("glaven_mon",glaven_mon);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/hlsInsert", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/hlsInsert", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void hlsUpdateAsync(String id,String user_name,String sopstvenik,String firma,String lokacija_sifra,String tip_lokacija,String lokal_pateka,String guid_transfer,String glaven_mon) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        hlsUpdateAsync(id, user_name, sopstvenik, firma, lokacija_sifra, tip_lokacija, lokal_pateka, guid_transfer, glaven_mon, null);
    }
    
    public void hlsUpdateAsync(final String id,final String user_name,final String sopstvenik,final String firma,final String lokacija_sifra,final String tip_lokacija,final String lokal_pateka,final String guid_transfer,final String glaven_mon,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                hlsUpdate(id, user_name, sopstvenik, firma, lokacija_sifra, tip_lokacija, lokal_pateka, guid_transfer, glaven_mon, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("hlsUpdate", result);
                }
            }
        }.execute();
    }
    
    public void hlsUpdate(String id,String user_name,String sopstvenik,String firma,String lokacija_sifra,String tip_lokacija,String lokal_pateka,String guid_transfer,String glaven_mon){
        hlsUpdate(id, user_name, sopstvenik, firma, lokacija_sifra, tip_lokacija, lokal_pateka, guid_transfer, glaven_mon, null);
    }
    
    public void hlsUpdate(String id,String user_name,String sopstvenik,String firma,String lokacija_sifra,String tip_lokacija,String lokal_pateka,String guid_transfer,String glaven_mon,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","hlsUpdate");
        soapReq.addProperty("id",id);
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("lokacija_sifra",lokacija_sifra);
        soapReq.addProperty("tip_lokacija",tip_lokacija);
        soapReq.addProperty("lokal_pateka",lokal_pateka);
        soapReq.addProperty("guid_transfer",guid_transfer);
        soapReq.addProperty("glaven_mon",glaven_mon);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/hlsUpdate", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/hlsUpdate", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void hlsDeleteAsync(String id,String user_name,String sopstvenik,String firma,String lokacija_sifra,String tip_lokacija) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        hlsDeleteAsync(id, user_name, sopstvenik, firma, lokacija_sifra, tip_lokacija, null);
    }
    
    public void hlsDeleteAsync(final String id,final String user_name,final String sopstvenik,final String firma,final String lokacija_sifra,final String tip_lokacija,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                hlsDelete(id, user_name, sopstvenik, firma, lokacija_sifra, tip_lokacija, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("hlsDelete", result);
                }
            }
        }.execute();
    }
    
    public void hlsDelete(String id,String user_name,String sopstvenik,String firma,String lokacija_sifra,String tip_lokacija){
        hlsDelete(id, user_name, sopstvenik, firma, lokacija_sifra, tip_lokacija, null);
    }
    
    public void hlsDelete(String id,String user_name,String sopstvenik,String firma,String lokacija_sifra,String tip_lokacija,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","hlsDelete");
        soapReq.addProperty("id",id);
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("lokacija_sifra",lokacija_sifra);
        soapReq.addProperty("tip_lokacija",tip_lokacija);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/hlsDelete", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/hlsDelete", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetSopstveniciAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSopstveniciAsync(null);
    }
    
    public void GetSopstveniciAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                GetSopstvenici(headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetSopstvenici", result);
                }
            }
        }.execute();
    }
    
    public void GetSopstvenici(){
        GetSopstvenici(null);
    }
    
    public void GetSopstvenici(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetSopstvenici");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetSopstvenici", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetSopstvenici", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void OpenConnectionAsync(String sql) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        OpenConnectionAsync(sql, null);
    }
    
    public void OpenConnectionAsync(final String sql,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                OpenConnection(sql, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("OpenConnection", result);
                }
            }
        }.execute();
    }
    
    public void OpenConnection(String sql){
        OpenConnection(sql, null);
    }
    
    public void OpenConnection(String sql,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","OpenConnection");
        soapReq.addProperty("sql",sql);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/OpenConnection", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/OpenConnection", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void VratiSaatAsync(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        VratiSaatAsync(user_name, sopstvenik, null);
    }
    
    public void VratiSaatAsync(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return VratiSaat(user_name, sopstvenik, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("VratiSaat", result);
                }
            }
        }.execute();
    }
    
    public String VratiSaat(String user_name,String sopstvenik){
        return VratiSaat(user_name, sopstvenik, null);
    }
    
    public String VratiSaat(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","VratiSaat");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/VratiSaat", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/VratiSaat", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getMyDatabasesCountAsync(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getMyDatabasesCountAsync(user_name, sopstvenik, null);
    }
    
    public void getMyDatabasesCountAsync(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return getMyDatabasesCount(user_name, sopstvenik, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getMyDatabasesCount", result);
                }
            }
        }.execute();
    }
    
    public int getMyDatabasesCount(String user_name,String sopstvenik){
        return getMyDatabasesCount(user_name, sopstvenik, null);
    }
    
    public int getMyDatabasesCount(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getMyDatabasesCount");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getMyDatabasesCount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getMyDatabasesCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void getMyDatabasesAsync(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getMyDatabasesAsync(user_name, sopstvenik, null);
    }
    
    public void getMyDatabasesAsync(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getMyDatabases(user_name, sopstvenik, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getMyDatabases", result);
                }
            }
        }.execute();
    }
    
    public String getMyDatabases(String user_name,String sopstvenik){
        return getMyDatabases(user_name, sopstvenik, null);
    }
    
    public String getMyDatabases(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getMyDatabases");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getMyDatabases", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getMyDatabases", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getIp_LokalCountAsync(String user_name,String sopstvenik,String firma,String lokacija_sifra,String mag_prod,String guid_transfer,int status) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getIp_LokalCountAsync(user_name, sopstvenik, firma, lokacija_sifra, mag_prod, guid_transfer, status, null);
    }
    
    public void getIp_LokalCountAsync(final String user_name,final String sopstvenik,final String firma,final String lokacija_sifra,final String mag_prod,final String guid_transfer,final int status,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return getIp_LokalCount(user_name, sopstvenik, firma, lokacija_sifra, mag_prod, guid_transfer, status, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getIp_LokalCount", result);
                }
            }
        }.execute();
    }
    
    public int getIp_LokalCount(String user_name,String sopstvenik,String firma,String lokacija_sifra,String mag_prod,String guid_transfer,int status){
        return getIp_LokalCount(user_name, sopstvenik, firma, lokacija_sifra, mag_prod, guid_transfer, status, null);
    }
    
    public int getIp_LokalCount(String user_name,String sopstvenik,String firma,String lokacija_sifra,String mag_prod,String guid_transfer,int status,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getIp_LokalCount");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("lokacija_sifra",lokacija_sifra);
        soapReq.addProperty("mag_prod",mag_prod);
        soapReq.addProperty("guid_transfer",guid_transfer);
        soapReq.addProperty("status",status);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getIp_LokalCount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getIp_LokalCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void getIp_LokalAsync(String user_name,String sopstvenik,String firma,String lokacija_sifra,String mag_prod,String guid_transfer,int status) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getIp_LokalAsync(user_name, sopstvenik, firma, lokacija_sifra, mag_prod, guid_transfer, status, null);
    }
    
    public void getIp_LokalAsync(final String user_name,final String sopstvenik,final String firma,final String lokacija_sifra,final String mag_prod,final String guid_transfer,final int status,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getIp_Lokal(user_name, sopstvenik, firma, lokacija_sifra, mag_prod, guid_transfer, status, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getIp_Lokal", result);
                }
            }
        }.execute();
    }
    
    public String getIp_Lokal(String user_name,String sopstvenik,String firma,String lokacija_sifra,String mag_prod,String guid_transfer,int status){
        return getIp_Lokal(user_name, sopstvenik, firma, lokacija_sifra, mag_prod, guid_transfer, status, null);
    }
    
    public String getIp_Lokal(String user_name,String sopstvenik,String firma,String lokacija_sifra,String mag_prod,String guid_transfer,int status,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getIp_Lokal");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("lokacija_sifra",lokacija_sifra);
        soapReq.addProperty("mag_prod",mag_prod);
        soapReq.addProperty("guid_transfer",guid_transfer);
        soapReq.addProperty("status",status);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getIp_Lokal", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getIp_Lokal", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getIp_mobAsync(String user_name,String sopstvenik) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getIp_mobAsync(user_name, sopstvenik, null);
    }
    
    public void getIp_mobAsync(final String user_name,final String sopstvenik,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getIp_mob(user_name, sopstvenik, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getIp_mob", result);
                }
            }
        }.execute();
    }
    
    public String getIp_mob(String user_name,String sopstvenik){
        return getIp_mob(user_name, sopstvenik, null);
    }
    
    public String getIp_mob(String user_name,String sopstvenik,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getIp_mob");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getIp_mob", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getIp_mob", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getIp_Lokal_dtAsync(String user_name,String sopstvenik,String firma,String lokacija_sifra,String mag_prod,String guid_transfer,int status) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getIp_Lokal_dtAsync(user_name, sopstvenik, firma, lokacija_sifra, mag_prod, guid_transfer, status, null);
    }
    
    public void getIp_Lokal_dtAsync(final String user_name,final String sopstvenik,final String firma,final String lokacija_sifra,final String mag_prod,final String guid_transfer,final int status,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getIp_Lokal_dt(user_name, sopstvenik, firma, lokacija_sifra, mag_prod, guid_transfer, status, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getIp_Lokal_dt", result);
                }
            }
        }.execute();
    }
    
    public void getIp_Lokal_dt(String user_name,String sopstvenik,String firma,String lokacija_sifra,String mag_prod,String guid_transfer,int status){
        getIp_Lokal_dt(user_name, sopstvenik, firma, lokacija_sifra, mag_prod, guid_transfer, status, null);
    }
    
    public void getIp_Lokal_dt(String user_name,String sopstvenik,String firma,String lokacija_sifra,String mag_prod,String guid_transfer,int status,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getIp_Lokal_dt");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("firma",firma);
        soapReq.addProperty("lokacija_sifra",lokacija_sifra);
        soapReq.addProperty("mag_prod",mag_prod);
        soapReq.addProperty("guid_transfer",guid_transfer);
        soapReq.addProperty("status",status);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getIp_Lokal_dt", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getIp_Lokal_dt", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getIpfromUserAsync(String user_name,String sopstvenik,String touser) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getIpfromUserAsync(user_name, sopstvenik, touser, null);
    }
    
    public void getIpfromUserAsync(final String user_name,final String sopstvenik,final String touser,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getIpfromUser(user_name, sopstvenik, touser, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getIpfromUser", result);
                }
            }
        }.execute();
    }
    
    public String getIpfromUser(String user_name,String sopstvenik,String touser){
        return getIpfromUser(user_name, sopstvenik, touser, null);
    }
    
    public String getIpfromUser(String user_name,String sopstvenik,String touser,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getIpfromUser");
        soapReq.addProperty("user_name",user_name);
        soapReq.addProperty("sopstvenik",sopstvenik);
        soapReq.addProperty("touser",touser);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getIpfromUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getIpfromUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
}
